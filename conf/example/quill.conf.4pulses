# Общий вид строк: имя_переменной = [значение] [размерность]
# значение (double) или размерность (string) можно не указывать
# Пробелы и части строк, следующие за '#', игнорируются

# число вычислительных потоков
#n_sr = 16; # default: 8

# шаги численной сетки; если задан dt, но не задан dx, то dx
# вычисляется автоматически так, чтобы алгоритм NDFX давал наименьшую
# дисперсию, но был устойчив; если dt не задан, то он вычисляется как
# половина критического для данной плотности шага по времени, после dx
# вычисляется автоматически по dt и ne, как написано выше
#dt = 0.05 # lambda
#dx = 0.1 # lambda
dy = 0.2 # lambda
dz = 0.2 # lambda

# длина волны лазерного импульса
lambda = 0.91 um # default: cm; possible: um; lambda_p

# концентрация электронов; используется при добавлении частиц при
# включенном движущемся окне, а также при расчёте шага по x, если он
# не задан явно
ne = 20 ncr # default: cm^{-3}; possible: ncr

# размеры области моделирования
xlength = 16 # default: lambda; possible: um, fs
ylength = 16 # default: lambda; possible: um
zlength = 16 # default: lambda; possible: um

# Можно задать несколько пар t_end, output_period, при этом на отрезке
# [0,t_end_1] будет использоваться output_period_1 и т. д.
# время моделирования
t_end = 12 # default: lambda; possible: um, mm, cm
# период вывода данных в файл
output_period = 0.5 # default: lambda; possible: um, mm, cm, t_end

# По умолчанию лазерные импульсы распространяются к центру области;
# величины, задающие лазерный импульс (например, a0y, a0z), относятся
# к координатам x', y', z', где ось x' направлена по движению
# лазерного импульса. Вектора x', y', z' образуют правую тройку, при
# этом y' лежит в плоскости xy, а z' - в полупространстве z>0
# (исключение: в случае, если x' параллелен z, то y' совпадает с y и
# z' лежит в плоскости xy).
# тип огибающей лазерного импульса
f_envelope = focused # default: cos, possible: focused, sscos, focussedSSC
# по умолчанию лазерные импульсы распространяются к центру области
# моделирования; b_sign = -1 меняет направление магнитного поля
# импульсов и, следовательно, их направление распространения на
# противоположное
b_sign = 1 # default: 1, possible: -1
# поляризация лазерного импульса; в случае эллиптической поляризации
# необходимо задать значение - отношение a0z к a0y=a0; эллиптическая
# поляризация будет задана корректно только в том случае, если задано
# a_0, а не P, I, W и т. п.
polarization = linear # default: linear; possible: circular, elliptic
# размеры лазерного импульса (в перетяжке)
xsigma = 1.8 # default: lambda; possible: um, fs
ysigma = 0.8 # default: lambda; possible: um
zsigma = 0.8 # default: lambda; possible: um
# расстояние от центра лазерного импульса до центра области (или "цели", если задан xtarget)
x0 = -4 # default: lambda; possible: um, fs
# координаты центра лазерного импульса относительно центра области (или "цели", если заданы ytarget, ztarget)
y0 = 4 # default: 0; default units: lambda; possible: um
z0 = 0 # default: 0; default units: lambda; possible: um
# r0, theta - положение импульса в полярной сист.коорд. в пл. XY,
# при этом r0 отсчитывается от "цели" (должно быть больше 0),
# вместо x0 - r0*cos(theta), вместо y0 - r0*sin(theta),
#r0 = 3.76      # default: lambda; possible: um
#theta = 30 deg # default: 0; default units: rad, possible: deg
# xtarget, ytarget, ztarget - смещение (относительно центра) точки, в направлении которой распространяется лазерный импульс
# Пример: если ytarget = 5, лазерный импульс будет располагаться "выше" центра на 5 lambda
#xtarget = 0     # default: lambda; possible: um
#ytarget = 0     # default: lambda; possible: um
#ztarget = 0     # default: lambda; possible: um
# абсолютная фаза импульса
phase = 0 pi # default: 0; default units: rad, possible: pi
# добавление лазерных импульсов - зеркальных отражений относительно
# плоскостей, проходящих через центр области моделирования
lp_reflection = xz&yz # default: off; possible: xy, xz, yz, xy&xz, xy&yz, xz&yz, xy&xz&yz
# заменяет в зеркальном отражении лазерного импульса соответствующее
# значение a0 на -a0, за счёт чего, например, можно изменить
# направление вращения поля в нём в случае циркулярной поляризации;
# нужно задавать для каждого из значений lp_reflection
#f_reflection = off # default: off; possible: y, z, off&z, etc.
# phi!=0 полностью отменяет действие lp_reflection и f_reflection, при
# этом создаётся второй лазерный импульс - отражение первого
# относительно центра области; поля второго импульса при этом
# задаются в системе координат, дополнительно повёрнутой относительно
# оси x' на угол phi, отсчитываемый от y' к z'
phi = 0 pi # default: 0; default units: rad, possible: pi
# мощность/интенсивность/энергия/безразмерная амплитуда лазерного импульса
#P = 70 TW # peak power; default: cgs; possible: PW, TW
#I = 1e22 W/cm^2 # peak intensity; default: cgs; possible: W/cm^2
W = 0.5 J # default units: cgs; possible: J
#a0 = 250
# если a0y=a0z=0, то используются значения, вычисленные по
# polarization, P, I, W или a0
#a0y = 3.2
#a0z = 1.7

# движущееся окно; выключается при наличии нейтральных потоков (flows)
mwindow = off # default: on; possible: on, off
# moving window velocity
#mwspeed = 0.4 # default: 1
# включает или отключает добавление частиц на передней границе области
# при работе движущегося окна
#mwseed = on # default: on; possible: on, off

# компоненты полей для вывода в файл
e_components_for_output = xyz # default: none; possible: x, y, z, xy, xz, yz, xyz
b_components_for_output = xyz # default: none; possible: x, y, z, xy, xz, yz, xyz
# расстояние от правой границы области до плоскости yz, данные в
# которой выводятся в файл;
#x0fout = 9 # default value: xlength/2; default units: lambda; possible: um, fs

# пучок частиц
#beam = off # default: off; possible: on, off
# тип частиц пучка
#beam_particles = ph # default: e; possible: e, p, ph
# число частиц в пучке
#Nb = 1e4
# энергия частиц в пучке; в слечае epsb<0 пучок летит справа налево
#epsb = 50 # MeV; possible: mc^2
# размеры пучка: xb - половина длины пучка, rb - радиус пучка
#xb = 9 # default: lambda; possible: um, fs
#rb = 4 # default: lambda; possible: um
# расстояние от правой границы области до центра пучка
#x0b = 9 # default: lambda; possible: um, fs

# включение ионов (только для плёнок)
ions = on # default: off; possible: on
# включение ионизации
ionization = on # default: off ; possible: on;
# элемент
element = Fe # possible: Fe, H; 
# список плёнок; все параметры плёнки должны быть обязательно
# определены после film = on для данной плёнки и до того, как
# встретится film = on для следующей плёнки
film = on # default: off; possible: on
# расстояние от левой границы области до левой границы плёнки
x0film = 8.9 # default: 0; default units: lambda, possible: um, fs
# полная толщина плёнки
filmwidth = 0.3 # default: lambda, possible: um, fs
# толщина части плёнки с линейным ростом плотности от 0 до nfilm
gradwidth = 0 # default units: lambda, possible: um, fs
# концентрация электронов в плёнке
y0film = 8.7
y1film = 9.2
z0film = 8.7
z1film = 9.2
nfilm = 0.5 ne # default: cm^{-3}; possible: ncr, ne
# отношение массы (в массах протона) к заряду (в зарядах протона) для
# иона плёнки
mcr = 56 # default: 1
# безразмерная температура электронов плёнки, f ~ e^(-(\gamma-1) / T)
# для ионов T -> T * cmr, хотя это не вполне корректно
#Tfilm = 4 # default: 0
#
#film = off # default: off; possible: on
#x0film = 11 # default: 0; default units: lambda, possible: um, fs
#filmwidth = 0.4 # default: lambda, possible: um, fs
#gradwidth = 0 # default: 0; default units: lambda, possible: um, fs
#nfilm = 0.25 ne # default: cm^{-3}; possible: ncr, ne
#mcr = 2 # default: 1

# neutral (elecrons+ions) flows, left and right
# (neflow!=0 turns off mowing window)
#nelflow = 1 ne # default units: ne
#vlflow = 0.999 # default: 0
#mcrlflow = 5.4452e-4 # positrons
# безразмерная температура электронов в сопутствующей потоку системе отсчёта,
# f ~ e^(-(\gamma-1) / T)
# для ионов T -> T * cmr, хотя это не вполне корректно
#Tlflow = 0.1 # default: 0
#nerflow = 1 ne # default units: ne
#vrflow = 0.999 # default: 0
#mcrrflow = 5.4452e-4
#Trflow = 1e-3 # default: 0

# число рядов частиц в ячейке по координатам
xnpic = 1
ynpic = 1
znpic = 1

# сорта частиц, данные о которых следует выводить в файл
particles_for_output = epph # default: e; possible: e, ep, eph, epph

# шаг по энергии в спектре, число точек в спектре и отношение общего
# числа частиц к числу частиц, все характеристики которых выводятся в
# файл, для разных сортов частиц
deps = 1 MeV # default: MeV; possible: mc^2
neps = 800
enthp = 20
#deps_p = 0.5 MeV # default value = deps; default units: MeV; possible: mc^2
#neps_p = 140 # default = neps
#enthp_p = 1 # default = enthp
#deps_ph = 0.5 MeV # default value = deps; default units: MeV; possible: mc^2
#neps_ph = 800 # default = neps
#enthp_ph = 10 # default = enthp
# шаг по энергии в ионном спектре в MeV на нуклон
deps_i = 0.5
#neps_i = 800 # default = neps
#enthp_i = 10 # default = enthp

# число частиц каждого сорта для вывода их траекторий в файл
n_tracks = 50 # default = 0
# момент включения алгоритма вывода траекторий частиц
tr_start = 7 # default value = 0; default units: lambda; possible: um, mm, cm
#tr_init = volume # default: line; possible: volume
# координаты концов прямого отрезка (tr_init = line) или диагональ
# прямоугольного параллелепипеда (tr_init = volume), с которого в
# момент времени tr_start берутся частицы для отслеживания траекторий;
# default value = 0
xtr1 = 8.5 # default: lambda; possible: um, fs
ytr1 = 9.25 # default: lambda; possible: um
ztr1 = 9.25 # default: lambda; possible: um
xtr2 = 9.5 # default: lambda; possible: um, fs
ytr2 = 9.25 # default: lambda; possible: um
ztr2 = 9.25 # default: lambda; possible: um

# алгоритм слияния квазичастиц; nl - nonlinear(q), ti -
# type-independently
pmerging = ti # default: off; possible: nl, ti
# критическое отношение числа квазичастиц одного сорта к числу ячеек
crpc = 2.0

# имя папки для результатов; не забудьте создать её вручную!
data_folder = results # default: results
